# .github/workflows/ci-cd-pipeline.yml
name: Java 21 CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # ─── BUILD & UNIT TESTS ─────────────────────────────────────────────────────────
  build-and-test:
    name: Build & Test (Maven + Java 21)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.x'
          cache: 'maven'

      - name: Build & run tests
        run: mvn clean verify -B

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: backend/target/surefire-reports

  # ─── STATIC CODE ANALYSIS: SpotBugs, PMD, Checkstyle ─────────────────────────────
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.x'
          cache: 'maven'

      - name: Run SpotBugs
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs

      - name: Run PMD
        run: mvn org.apache.maven.plugins:maven-pmd-plugin:check

      - name: Run Checkstyle
        run: mvn org.apache.maven.plugins:maven-checkstyle-plugin:check

  # ─── DEPENDENCY VULNERABILITY SCAN ────────────────────────────────────────────────
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.x'
          cache: 'maven'

      - name: Run OWASP Dependency-Check
        run: mvn org.owasp:dependency-check-maven:check

  # ─── CODEQL SECURITY ANALYSIS ────────────────────────────────────────────────────
  codeql-analysis:
    name: CodeQL Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ─── SONARQUBE ANALYSIS ───────────────────────────────────────────────────────────
  sonar-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: [build-and-test, static-analysis]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN:    ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.x'
          cache: 'maven'

      - name: Run SonarQube analysis
        run: mvn sonar:sonar \
          -Dsonar.projectKey=UniRideBackend \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }}

  # ─── PACKAGE & UPLOAD ARTIFACT ────────────────────────────────────────────────────
  package-artifact:
    name: Package & Upload Artifact
    runs-on: ubuntu-latest
    needs: [build-and-test, static-analysis, dependency-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.x'
          cache: 'maven'

      - name: Build and Package
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: uniride-backend-jar
          path: backend/target/*.jar
